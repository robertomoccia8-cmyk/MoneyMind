Imports System.Data.SQLite

Public Class FormRaffinaPattern

    ' VARIABILI PER INTELLIGENZA ARTIFICIALI TRANSAZIONI
    Private gptClassificatore As GptClassificatoreTransazioni
    Private btnAIAssistita As Button
    Private panelAI As Panel
    Private lblAIStatus As Label
    Private progBarAI As ProgressBar
    Private btnTrovaSimiliAI As Button
    Private btnCreaPatternAI As Button

    Private necessityOptions As List(Of String) = New List(Of String) From {"Base", "Importante", "Superflua"}
    Private seasonOptions As List(Of String) = New List(Of String) From {"Nessuna", "Invernale", "Primaverile", "Estiva", "Autunnale", "Annuale"}
    Private frequencyOptions As List(Of String) = New List(Of String) From {"Occasionale", "Ricorrente", "Annuale", "Mensile Fissa"}

    Private Sub PopolaComboNecessita()
        cmbNecessita.Items.Clear()
        cmbNecessita.Items.AddRange(necessityOptions.ToArray())
    End Sub

    Private Sub PopolaComboStagionalita()
        cmbStagionalita.Items.Clear()
        cmbStagionalita.Items.AddRange(seasonOptions.ToArray())
    End Sub

    Private transazioneSelezionataID As Integer = -1

    Private Sub FormRaffinaPattern_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        ' 1) Carica liste
        PatternOptionsManager.LoadOptions(necessityOptions, frequencyOptions, seasonOptions)

        ' 2) Costruisci interfaccia base
        ImpostaInterfaccia()

        ' 3) Inizializza AI
        gptClassificatore = New GptClassificatoreTransazioni()

        ' üîπ TOP BAR: header con pulsanti AI
        Dim panelTop As New Panel With {
        .Dock = DockStyle.Top,
        .Height = 80,
        .BackColor = Color.FromArgb(240, 244, 248)
    }
        splitMain.Panel2.Controls.Add(panelTop)
        splitMain.Panel2.Controls.SetChildIndex(panelTop, 0)

        Dim lblTitolo As New Label With {
        .Text = "‚öôÔ∏è Raffina Pattern con AI",
        .Font = New Font("Segoe UI", 12, FontStyle.Bold),
        .Dock = DockStyle.Left,
        .ForeColor = Color.FromArgb(45, 45, 48),
        .AutoSize = False,
        .TextAlign = ContentAlignment.MiddleLeft,
        .Width = 280,
        .Padding = New Padding(15, 0, 0, 0)
    }
        panelTop.Controls.Add(lblTitolo)

        Dim flowTopButtons As New FlowLayoutPanel With {
        .Dock = DockStyle.Fill,
        .FlowDirection = FlowDirection.LeftToRight,
        .WrapContents = False,
        .Padding = New Padding(10, 20, 10, 10)
    }
        panelTop.Controls.Add(flowTopButtons)

        ' Pulsante AI Assistita
        btnAIAssistita = CreaPulsanteAI("ü§ñ AI Assistita", Color.FromArgb(52, 120, 200))
        AddHandler btnAIAssistita.Click, AddressOf BtnAIAssistita_Click
        flowTopButtons.Controls.Add(btnAIAssistita)

        ' Pulsante Trova Simili
        btnTrovaSimiliAI = CreaPulsanteAI("üîç Trova Simili", Color.FromArgb(72, 140, 220))
        AddHandler btnTrovaSimiliAI.Click, AddressOf BtnTrovaSimiliAI_Click
        flowTopButtons.Controls.Add(btnTrovaSimiliAI)

        ' Pulsante Crea Pattern
        btnCreaPatternAI = CreaPulsanteAI("‚ú® Crea Pattern", Color.FromArgb(90, 180, 100))
        AddHandler btnCreaPatternAI.Click, AddressOf BtnCreaPatternAI_Click
        flowTopButtons.Controls.Add(btnCreaPatternAI)

        ' üîπ MAIN SPLIT (gi√† creato in ImpostaInterfaccia)
        ' ‚Üí Panel1 = griglia transazioni
        ' ‚Üí Panel2 = campi pattern + sopra la TopBar

        ' üîπ BOTTOM STATUS BAR
        Dim panelBottom As New Panel With {
        .Dock = DockStyle.Bottom,
        .Height = 35,
        .BackColor = Color.FromArgb(250, 250, 252)
    }
        splitMain.Panel2.Controls.Add(panelBottom)

        lblAIStatus = New Label With {
        .Text = "‚úÖ Pronto",
        .Dock = DockStyle.Left,
        .AutoSize = False,
        .Width = 300,
        .TextAlign = ContentAlignment.MiddleLeft,
        .Font = New Font("Segoe UI", 9, FontStyle.Italic),
        .ForeColor = Color.DarkGreen,
        .Padding = New Padding(10, 0, 0, 0)
    }
        panelBottom.Controls.Add(lblAIStatus)

        progBarAI = New ProgressBar With {
        .Style = ProgressBarStyle.Marquee,
        .MarqueeAnimationSpeed = 30,
        .Dock = DockStyle.Right,
        .Width = 180,
        .Visible = False
    }
        panelBottom.Controls.Add(progBarAI)

        ' üîπ Spingi in basso i controlli preesistenti in Panel2
        For Each ctl As Control In splitMain.Panel2.Controls
            If ctl IsNot panelTop AndAlso ctl IsNot panelBottom Then
                ctl.Top += panelTop.Height
            End If
        Next

        ' 4) Carica dati
        CaricaTransazioniNonClassificate()
        CaricaCombinazioniPattern()
        AdattaLarghezzaComboCombinazioni()
        PopolaComboNecessita()
        PopolaComboStagionalita()
        PopolaComboFrequenza()
    End Sub

    ' üîπ Funzione helper per creare pulsanti uniformi
    Private Function CreaPulsanteAI(testo As String, colore As Color) As Button
        Dim btn As New Button With {
        .Text = testo,
        .Size = New Size(150, 35),
        .BackColor = colore,
        .ForeColor = Color.White,
        .FlatStyle = FlatStyle.Flat,
        .Font = New Font("Segoe UI", 9, FontStyle.Bold),
        .Margin = New Padding(5, 0, 5, 0)
    }
        btn.FlatAppearance.BorderSize = 0
        Return btn
    End Function




    Private splitMain As SplitContainer
    ' Tutti i valori di Pattern.Parola (DISTINCT, ordinati)
    Private Function GetTutteLeParolePattern() As List(Of String)
        Dim result As New List(Of String)
        Try
            Using conn As New SQLite.SQLiteConnection(DatabaseManager.GetConnectionString())
                conn.Open()
                Dim sql As String = "SELECT DISTINCT Parola FROM Pattern WHERE Parola <> '' ORDER BY Parola"
                Using cmd As New SQLite.SQLiteCommand(sql, conn)
                    Using r = cmd.ExecuteReader()
                        While r.Read()
                            result.Add(r("Parola").ToString())
                        End While
                    End Using
                End Using
            End Using
        Catch ex As Exception
            MessageBox.Show("Errore caricamento parole pattern: " & ex.Message, "Errore", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
        Return result
    End Function

    ' MacroCategorie esistenti (DISTINCT) per guidare la creazione AI
    Private Function GetMacroCategorieEsistenti() As List(Of String)
        Dim result As New List(Of String)
        Try
            Using conn As New SQLite.SQLiteConnection(DatabaseManager.GetConnectionString())
                conn.Open()
                Dim sql As String = "SELECT DISTINCT MacroCategoria FROM Pattern WHERE MacroCategoria <> '' ORDER BY MacroCategoria"
                Using cmd As New SQLite.SQLiteCommand(sql, conn)
                    Using r = cmd.ExecuteReader()
                        While r.Read()
                            result.Add(r("MacroCategoria").ToString())
                        End While
                    End Using
                End Using
            End Using
        Catch ex As Exception
            MessageBox.Show("Errore caricamento macrocategorie: " & ex.Message, "Errore", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
        Return result
    End Function
    ' Dato un valore di Parola, recupera MacroCategoria/Categoria suggerite dal DB per auto-compilare i campi
    Private Function CaricaDettagliPattern(parola As String) As (Macro As String, Cat As String)
        Try
            Using conn As New SQLite.SQLiteConnection(DatabaseManager.GetConnectionString())
                conn.Open()
                Dim sql As String = "SELECT MacroCategoria, Categoria FROM Pattern WHERE Parola = @p LIMIT 1"
                Using cmd As New SQLite.SQLiteCommand(sql, conn)
                    cmd.Parameters.AddWithValue("@p", parola)
                    Using r = cmd.ExecuteReader()
                        If r.Read() Then
                            Return (r("MacroCategoria").ToString(), r("Categoria").ToString())
                        End If
                    End Using
                End Using
            End Using
        Catch
        End Try
        Return ("", "")
    End Function
    Private Sub ImpostaInterfaccia()
        Me.Text = "Raffina Pattern"
        Me.Size = New Size(1200, 700)
        Me.StartPosition = FormStartPosition.CenterScreen
        Me.BackColor = ColorTranslator.FromHtml("#FAFBFC")

        ' SplitContainer
        splitMain = New SplitContainer()
        splitMain.Dock = DockStyle.Fill
        splitMain.Orientation = Orientation.Vertical
        splitMain.SplitterDistance = 70
        splitMain.Panel1.BackColor = ColorTranslator.FromHtml("#FAFBFC")
        splitMain.Panel2.BackColor = ColorTranslator.FromHtml("#FAFBFC")
        splitMain.Panel1.Padding = New Padding(10)
        splitMain.Panel2.Padding = New Padding(20)
        splitMain.Panel1.AutoScroll = True
        splitMain.Panel2.AutoScroll = True
        Me.Controls.Add(splitMain)

        ' Sinistra - Transazioni Non Classificate
        Dim lblTitolo As New Label()
        lblTitolo.Text = "Transazioni Non Classificate"
        lblTitolo.Font = New Font("Microsoft Sans Serif", 12, FontStyle.Bold)
        lblTitolo.ForeColor = ColorTranslator.FromHtml("#2C3E50")
        lblTitolo.Location = New Point(0, 0)
        lblTitolo.Size = New Size(400, 25)
        splitMain.Panel1.Controls.Add(lblTitolo)

        dgvTransazioniNonClassificate = New DataGridView()
        dgvTransazioniNonClassificate.Location = New Point(0, 30)
        dgvTransazioniNonClassificate.Size = New Size(480, 620)
        dgvTransazioniNonClassificate.Anchor = AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Left Or AnchorStyles.Right
        dgvTransazioniNonClassificate.SelectionMode = DataGridViewSelectionMode.FullRowSelect
        dgvTransazioniNonClassificate.MultiSelect = False
        dgvTransazioniNonClassificate.ReadOnly = True
        dgvTransazioniNonClassificate.AllowUserToAddRows = False
        dgvTransazioniNonClassificate.AllowUserToDeleteRows = False
        dgvTransazioniNonClassificate.RowHeadersVisible = False
        dgvTransazioniNonClassificate.BackgroundColor = Color.White
        dgvTransazioniNonClassificate.GridColor = ColorTranslator.FromHtml("#BDC3C7")
        splitMain.Panel1.Controls.Add(dgvTransazioniNonClassificate)

        ' Destra - Campi Pattern
        Dim lblTitoloPattern As New Label()
        lblTitoloPattern.Text = "Crea Nuovo Pattern"
        lblTitoloPattern.Font = New Font("Microsoft Sans Serif", 12, FontStyle.Bold)
        lblTitoloPattern.ForeColor = ColorTranslator.FromHtml("#2C3E50")
        lblTitoloPattern.Location = New Point(0, 0)
        lblTitoloPattern.Size = New Size(400, 25)
        splitMain.Panel2.Controls.Add(lblTitoloPattern)

        CreaControlliPattern(splitMain.Panel2)
    End Sub

    Private Sub CreaControlliPattern(parent As Panel)
        Dim yPos As Integer = 40
        Dim spacing As Integer = 60

        ' Parola
        CreaLabelEInput(parent, "Parola:", txtParola, 20, yPos)
        txtParola.BackColor = ColorTranslator.FromHtml("#FFF3CD")
        yPos += spacing

        ' MacroCategoria
        CreaLabelEInput(parent, "Macro Categoria:", txtMacroCategoria, 20, yPos)
        yPos += spacing

        ' Categoria
        CreaLabelEInput(parent, "Categoria:", txtCategoria, 20, yPos)
        yPos += spacing

        ' RIMUOVI COMPLETAMENTE SottoCategoria

        ' Necessit√† + combo + pulsante gestione
        CreaLabelECombo(parent, "Necessit√†:", cmbNecessita, 20, yPos)
        btnGestisciNecessita = New Button
        btnGestisciNecessita.Text = "Modifica voci"
        btnGestisciNecessita.Size = New Size(90, 30)
        btnGestisciNecessita.Location = New Point(240, yPos + 20)
        AddHandler btnGestisciNecessita.Click, AddressOf GestisciNecessita_Click
        parent.Controls.Add(btnGestisciNecessita)
        yPos += spacing

        ' Frequenza
        CreaLabelECombo(parent, "Frequenza:", cmbFrequenza, 20, yPos)
        btnGestisciFrequenza = New Button
        btnGestisciFrequenza.Text = "Modifica voci"
        btnGestisciFrequenza.Size = New Size(90, 30)
        btnGestisciFrequenza.Location = New Point(240, yPos + 20)
        AddHandler btnGestisciFrequenza.Click, AddressOf GestisciFrequenza_Click
        parent.Controls.Add(btnGestisciFrequenza)
        yPos += spacing

        ' Stagionalit√† + combo + pulsante gestione
        CreaLabelECombo(parent, "Stagionalit√†:", cmbStagionalita, 20, yPos)
        btnGestisciStagionalita = New Button
        btnGestisciStagionalita.Text = "Modifica voci"
        btnGestisciStagionalita.Size = New Size(90, 30)
        btnGestisciStagionalita.Location = New Point(240, yPos + 20)
        AddHandler btnGestisciStagionalita.Click, AddressOf GestisciStagionalita_Click
        parent.Controls.Add(btnGestisciStagionalita)
        yPos += spacing

        ' Peso
        CreaLabelEInput(parent, "Peso (0-100):", txtPeso, 20, yPos)
        txtPeso.TextAlign = HorizontalAlignment.Right
        txtPeso.Text = "50"
        yPos += spacing

        ' Separatore
        Dim separatore As New Label
        separatore.Text = StrDup(22, "‚îÄ")
        separatore.ForeColor = ColorTranslator.FromHtml("#BDC3C7")
        separatore.Location = New Point(20, yPos)
        separatore.Size = New Size(300, 20)
        parent.Controls.Add(separatore)
        yPos += 40

        ' ComboBox combinazioni esistenti
        CreaLabelECombo(parent, "Usa combinazione esistente (auto-compila):", cmbCombinazioni, 20, yPos)
        cmbCombinazioni.BackColor = ColorTranslator.FromHtml("#E8F5E8")
        yPos += spacing + 20

        ' Pulsante Aggiungi Pattern
        btnAggiungiPattern = New Button
        btnAggiungiPattern.Text = "Aggiungi Pattern"
        btnAggiungiPattern.Size = New Size(180, 40)
        btnAggiungiPattern.Location = New Point(20, yPos)
        btnAggiungiPattern.BackColor = ColorTranslator.FromHtml("#2980B9")
        btnAggiungiPattern.ForeColor = Color.White
        btnAggiungiPattern.Font = New Font("Microsoft Sans Serif", 10, FontStyle.Bold)
        btnAggiungiPattern.Cursor = Cursors.Hand
        btnAggiungiPattern.FlatStyle = FlatStyle.Flat
        btnAggiungiPattern.FlatAppearance.BorderSize = 0
        parent.Controls.Add(btnAggiungiPattern)
        yPos += 60

        ' Pulsante Chiudi
        Dim btnChiudi As New Button
        btnChiudi.Text = "Chiudi"
        btnChiudi.Size = New Size(100, 35)
        btnChiudi.Location = New Point(210, yPos - 60)
        btnChiudi.BackColor = ColorTranslator.FromHtml("#95A5A6")
        btnChiudi.ForeColor = Color.White
        btnChiudi.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Regular)
        btnChiudi.Cursor = Cursors.Hand
        btnChiudi.FlatStyle = FlatStyle.Flat
        btnChiudi.FlatAppearance.BorderSize = 0
        AddHandler btnChiudi.Click, AddressOf BtnChiudi_Click
        parent.Controls.Add(btnChiudi)
    End Sub

    Private Sub ModificaListaOption(options As List(Of String),
                                title As String,
                                combo As ComboBox)

        Dim prompt = $"Gestione {title}" & vbCrLf & "Scrivi le opzioni separate da virgola."
        Dim input = InputBox(prompt, title, String.Join(",", options))

        If String.IsNullOrWhiteSpace(input) Then Return

        Dim newOpts = input.Split(","c).
                     Select(Function(s) s.Trim()).
                     Where(Function(s) s <> "").
                     Distinct(StringComparer.OrdinalIgnoreCase).
                     ToList()

        options.Clear()
        options.AddRange(newOpts)

        combo.Items.Clear()
        combo.Items.AddRange(options.ToArray())

        ' Alla fine salva sempre su disco tutte e tre le liste
        PatternOptionsManager.SaveOptions(necessityOptions, frequencyOptions, seasonOptions)
    End Sub

    Private Sub CreaLabelEInput(parent As Panel, testo As String, ByRef textBox As TextBox, x As Integer, y As Integer)
        Dim lbl As New Label()
        lbl.Text = testo
        lbl.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Bold)
        lbl.ForeColor = ColorTranslator.FromHtml("#2C3E50")
        lbl.Location = New Point(x, y)
        lbl.Size = New Size(180, 20)
        parent.Controls.Add(lbl)

        textBox = New TextBox()
        textBox.Size = New Size(200, 25)
        textBox.Location = New Point(x, y + 25)
        textBox.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Regular)
        textBox.ForeColor = ColorTranslator.FromHtml("#34495E")
        textBox.BackColor = Color.White
        textBox.BorderStyle = BorderStyle.FixedSingle
        parent.Controls.Add(textBox)
    End Sub

    Private Sub CreaLabelECombo(parent As Panel, testo As String, ByRef comboBox As ComboBox, x As Integer, y As Integer)
        Dim lbl As New Label()
        lbl.Text = testo
        lbl.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Bold)
        lbl.ForeColor = ColorTranslator.FromHtml("#2C3E50")
        lbl.Location = New Point(x, y)
        'lbl.Size = New Size(200, 20)      ' Larghezza uguale alla combobox
        lbl.AutoSize = False
        lbl.TextAlign = ContentAlignment.MiddleLeft
        lbl.Size = New Size(300, 20) ' (puoi allargare a 320‚Äí350 se ti serve, MAI meno della larghezza della frase)
        parent.Controls.Add(lbl)

        comboBox = New ComboBox()
        comboBox.Size = New Size(200, 25)
        comboBox.Location = New Point(x, y + 25)
        comboBox.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Regular)
        comboBox.ForeColor = ColorTranslator.FromHtml("#34495E")
        comboBox.BackColor = Color.White
        comboBox.DropDownStyle = ComboBoxStyle.DropDownList
        parent.Controls.Add(comboBox)
    End Sub

    Private Sub CaricaTransazioniNonClassificate()
        Try
            Using conn As New SQLiteConnection(DatabaseManager.GetConnectionString())
                conn.Open()
                Dim query As String = "
                SELECT ID, Descrizione, Importo
                FROM Transazioni
                WHERE MacroCategoria IS NULL OR MacroCategoria = ''
                ORDER BY Data DESC"
                Using adapter As New SQLiteDataAdapter(query, conn)
                    Dim dt As New DataTable()
                    adapter.Fill(dt)
                    dgvTransazioniNonClassificate.DataSource = dt

                    If dgvTransazioniNonClassificate.Columns.Count > 0 Then
                        With dgvTransazioniNonClassificate
                            .AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
                            .AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells

                            .Columns("ID").HeaderText = "ID"
                            .Columns("ID").MinimumWidth = 30
                            .Columns("ID").FillWeight = 0.5  ' Quota minima!

                            .Columns("Descrizione").HeaderText = "Descrizione Transazione"
                            .Columns("Descrizione").MinimumWidth = 200
                            .Columns("Descrizione").FillWeight = 9.5  ' Prende quasi tutto lo spazio
                            .Columns("Descrizione").DefaultCellStyle.WrapMode = DataGridViewTriState.True
                        End With
                    End If

                    ' Stile header
                    dgvTransazioniNonClassificate.ColumnHeadersDefaultCellStyle.BackColor = ColorTranslator.FromHtml("#2C3E50")
                    dgvTransazioniNonClassificate.ColumnHeadersDefaultCellStyle.ForeColor = Color.White
                    dgvTransazioniNonClassificate.ColumnHeadersDefaultCellStyle.Font = New Font("Microsoft Sans Serif", 9, FontStyle.Bold)
                    dgvTransazioniNonClassificate.EnableHeadersVisualStyles = False
                End Using
            End Using
        Catch ex As Exception
            MessageBox.Show("Errore caricamento transazioni: " & ex.Message)
        End Try
    End Sub

    Private Function TrovaPatternLocalmente(parolaChiave As String, elenco As List(Of String), Optional maxSuggerimenti As Integer = 5) As List(Of String)
        If String.IsNullOrWhiteSpace(parolaChiave) OrElse elenco Is Nothing OrElse elenco.Count = 0 Then
            Return New List(Of String)
        End If
        Dim key = parolaChiave.Trim().ToLowerInvariant()
        ' Punteggio semplice: match diretto > contiene > somiglianza basica su prefissi
        Dim scored = elenco.Select(Function(p)
                                       Dim s = p?.Trim()
                                       If String.IsNullOrEmpty(s) Then Return (P:=p, Score:=-1)
                                       Dim t = s.ToLowerInvariant()
                                       Dim score As Integer = 0
                                       If t = key Then score = 100
                                       If t.Contains(key) Then score = Math.Max(score, 80)
                                       If key.Contains(t) Then score = Math.Max(score, 70)
                                       If t.StartsWith(key) Then score = Math.Max(score, 60)
                                       Return (P:=s, Score:=score)
                                   End Function).
                        Where(Function(x) x.Score >= 0).
                        OrderByDescending(Function(x) x.Score).
                        ThenBy(Function(x) x.P).
                        Take(maxSuggerimenti).
                        Select(Function(x) x.P).
                        ToList()
        Return scored
    End Function
    Private Sub CaricaCombinazioniPattern()
        Try
            Using conn As New SQLiteConnection(DatabaseManager.GetConnectionString())
                conn.Open()

                ' Seleziona combinazioni uniche a 2 livelli
                Dim sql As String = "
                SELECT DISTINCT 
                    MacroCategoria || ' > ' || Categoria AS DisplayText,
                    MacroCategoria,
                    Categoria,
                    Necessita,
                    Frequenza,
                    Stagionalita
                FROM Pattern
                WHERE MacroCategoria <> '' 
                  AND Categoria <> ''
                ORDER BY MacroCategoria, Categoria;"

                Using cmd As New SQLiteCommand(sql, conn)
                    Using reader As SQLiteDataReader = cmd.ExecuteReader()
                        ' Svuota e inizializza
                        cmbCombinazioni.Items.Clear()
                        cmbCombinazioni.Items.Add("-- Seleziona combinazione esistente --")

                        ' Aggiungi i valori letti
                        While reader.Read()
                            Dim item As New ComboItem With {
                            .Text = reader("DisplayText").ToString(),
                            .MacroCategoria = reader("MacroCategoria").ToString(),
                            .Categoria = reader("Categoria").ToString(),
                            .Necessita = reader("Necessita").ToString(),
                            .Frequenza = reader("Frequenza").ToString(),
                            .Stagionalita = reader("Stagionalita").ToString()
                        }
                            cmbCombinazioni.Items.Add(item)
                        End While

                        cmbCombinazioni.SelectedIndex = 0
                        AdattaLarghezzaComboCombinazioni()
                    End Using
                End Using
            End Using
        Catch ex As Exception
            MessageBox.Show("Errore caricamento combinazioni esistenti: " & ex.Message,
                        "Errore", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Sub AdattaLarghezzaComboCombinazioni()
        If cmbCombinazioni.Items.Count = 0 Then
            cmbCombinazioni.Width = 200
            cmbCombinazioni.DropDownWidth = 200
            Exit Sub
        End If

        Dim maxWidth As Integer = 200
        Dim graf As Graphics = cmbCombinazioni.CreateGraphics()
        Dim font As Font = cmbCombinazioni.Font

        For Each itm In cmbCombinazioni.Items
            Dim textSize As SizeF = graf.MeasureString(itm.ToString(), font)
            maxWidth = Math.Max(maxWidth, CInt(textSize.Width) + 0)  ' +0px margine extra
        Next

        cmbCombinazioni.Width = maxWidth
        cmbCombinazioni.DropDownWidth = maxWidth   ' *** QUESTA √® la chiave! ***
        graf.Dispose()
    End Sub

    Private Sub PopolaComboFrequenza()
        cmbFrequenza.Items.Clear()
        cmbFrequenza.Items.AddRange(frequencyOptions.ToArray())
    End Sub

    Private Sub dgvTransazioniNonClassificate_SelectionChanged(sender As Object, e As EventArgs) Handles dgvTransazioniNonClassificate.SelectionChanged
        If dgvTransazioniNonClassificate.SelectedRows.Count > 0 Then
            transazioneSelezionataID = Convert.ToInt32(dgvTransazioniNonClassificate.SelectedRows(0).Cells("ID").Value)
        End If
    End Sub

    Private Sub GestisciNecessita_Click(sender As Object, e As EventArgs)
        ModificaListaOption(necessityOptions, "Necessit√†", cmbNecessita)
    End Sub

    Private Sub GestisciStagionalita_Click(sender As Object, e As EventArgs)
        ModificaListaOption(seasonOptions, "Stagionalit√†", cmbStagionalita)
    End Sub

    Private Sub cmbCombinazioni_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCombinazioni.SelectedIndexChanged
        If cmbCombinazioni.SelectedIndex > 0 Then
            Dim selectedItem As ComboItem = CType(cmbCombinazioni.SelectedItem, ComboItem)
            txtMacroCategoria.Text = selectedItem.MacroCategoria
            txtCategoria.Text = selectedItem.Categoria
            ' RIMUOVI txtSottoCategoria.Text = selectedItem.SottoCategoria

            cmbNecessita.SelectedItem = selectedItem.Necessita

            ' Imposta frequenza se esiste
            For i As Integer = 0 To cmbFrequenza.Items.Count - 1
                If cmbFrequenza.Items(i).ToString() = selectedItem.Frequenza Then
                    cmbFrequenza.SelectedIndex = i
                    Exit For
                End If
            Next

            cmbStagionalita.SelectedItem = selectedItem.Stagionalita
        Else
            ' Reset campi se si deseleziona
            If cmbCombinazioni.SelectedIndex = 0 Then
                txtMacroCategoria.Clear()
                txtCategoria.Clear()
                ' RIMUOVI txtSottoCategoria.Clear()
                cmbNecessita.SelectedIndex = -1
                cmbFrequenza.SelectedIndex = -1
                cmbStagionalita.SelectedIndex = -1
            End If
        End If
    End Sub

    Private Sub GestisciFrequenza_Click(sender As Object, e As EventArgs)
        ModificaListaOption(frequencyOptions, "Frequenza", cmbFrequenza)
    End Sub

    Private Async Sub BtnAIAssistita_Click(sender As Object, e As EventArgs)
        ' 1) Controllo selezione riga sulla griglia delle transazioni NON classificate
        If dgvTransazioniNonClassificate Is Nothing OrElse dgvTransazioniNonClassificate.SelectedRows.Count = 0 Then
            MessageBox.Show("Seleziona prima una transazione non classificata dalla lista a sinistra.", "Attenzione", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If

        Dim row As DataGridViewRow = dgvTransazioniNonClassificate.SelectedRows(0)

        ' 2) Recupera la descrizione; nel tuo SELECT carichi ID, Descrizione
        Dim descr As String = row.Cells("Descrizione").Value?.ToString()
        If String.IsNullOrWhiteSpace(descr) Then
            MessageBox.Show("Descrizione transazione mancante nella riga selezionata.", "Errore", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Return
        End If

        ' 3) Recupera un importo per il contesto AI (opzionale). La tua query corrente non include Importo:
        '    Se vuoi includerlo, modifica CaricaTransazioniNonClassificate SELECT per includere anche Importo.
        '    Qui gestiamo il caso in cui la colonna Importo NON esista: usiamo 0 come fallback.
        Dim importo As Decimal = 0D
        If dgvTransazioniNonClassificate.Columns.Contains("Importo") Then
            Dim impStr As String = row.Cells("Importo").Value?.ToString()
            If Not String.IsNullOrWhiteSpace(impStr) Then
                ' Parsing robusto: prova prima italiano, poi invariant
                If Not Decimal.TryParse(impStr, Globalization.NumberStyles.Any, Globalization.CultureInfo.GetCultureInfo("it-IT"), importo) Then
                    Decimal.TryParse(impStr, Globalization.NumberStyles.Any, Globalization.CultureInfo.InvariantCulture, importo)
                End If
            End If
        End If

        ' 4) UI stato
        progBarAI.Visible = True
        btnAIAssistita.Enabled = False
        lblAIStatus.Text = "Analisi AI in corso..."
        lblAIStatus.ForeColor = Color.RoyalBlue

        Try
            ' 5) Chiamata AI
            Dim suggerimento = Await gptClassificatore.AnalizzaTransazione(descr, importo)

            ' 6) Ripristina UI
            progBarAI.Visible = False
            btnAIAssistita.Enabled = True

            If suggerimento Is Nothing OrElse Not suggerimento.IsValid Then
                lblAIStatus.Text = $"AI: nessun suggerimento. {suggerimento?.Motivazione}"
                lblAIStatus.ForeColor = Color.OrangeRed
                Return
            End If

            ' 7) Dialog di conferma
            Dim testo As String =
            $"Nome Societ√†: {suggerimento.NomeSocieta}" & vbCrLf &
            $"Attivit√†: {suggerimento.DescrizioneAttivita}" & vbCrLf &
            $"Parola Chiave: {suggerimento.ParolaChiave}" & vbCrLf &
            $"Suggerimento: {suggerimento.MacroCategoria} > {suggerimento.Categoria} (Confidenza: {suggerimento.Confidenza}%)" & vbCrLf & vbCrLf &
            "Accettare la classificazione proposta?"

            Dim result = MessageBox.Show(testo, "Conferma classificazione AI", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question)

            Select Case result
                Case DialogResult.Yes
                    ' Applica i suggerimenti ai campi del pattern per l‚Äôinserimento
                    txtParola.Text = suggerimento.ParolaChiave
                    txtMacroCategoria.Text = suggerimento.MacroCategoria
                    txtCategoria.Text = suggerimento.Categoria
                    lblAIStatus.Text = "Classificazione proposta applicata ai campi."
                    lblAIStatus.ForeColor = Color.DarkGreen

                Case DialogResult.No
                    ' Offri scelta: selezione pattern esistente o creazione manuale gi√† supportata dal form
                    Dim scelta = MessageBox.Show("Vuoi scegliere una combinazione esistente? S√¨ per scegliere, No per creare manualmente.", "Opzioni", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If scelta = DialogResult.Yes Then
                        ' Preseleziona Macro/Categoria per aiutare l‚Äôutente, se presenti nella combo
                        SelezionaCombinazionePi√πVicina(suggerimento.MacroCategoria, suggerimento.Categoria)
                    Else
                        ' Precompila i campi per la creazione manuale
                        txtParola.Text = suggerimento.ParolaChiave
                        txtMacroCategoria.Text = suggerimento.MacroCategoria
                        txtCategoria.Text = suggerimento.Categoria
                    End If
                    lblAIStatus.Text = "Scelta alternativa attivata."
                    lblAIStatus.ForeColor = Color.DarkGoldenrod

                Case DialogResult.Cancel
                    lblAIStatus.Text = "Operazione annullata."
                    lblAIStatus.ForeColor = Color.Gray
            End Select

        Catch ex As Exception
            progBarAI.Visible = False
            btnAIAssistita.Enabled = True
            lblAIStatus.Text = $"Errore AI: {ex.Message}"
            lblAIStatus.ForeColor = Color.Red
        End Try
    End Sub

    Private Sub SelezionaCombinazionePi√πVicina(macro As String, categoria As String)
        If cmbCombinazioni Is Nothing OrElse cmbCombinazioni.Items.Count = 0 Then Return
        Dim target = $"{macro} > {categoria}".Trim()

        ' prova match esatto su ComboItem.Text
        For i As Integer = 0 To cmbCombinazioni.Items.Count - 1
            If TypeOf cmbCombinazioni.Items(i) Is FormRaffinaPattern.ComboItem Then
                Dim it = DirectCast(cmbCombinazioni.Items(i), FormRaffinaPattern.ComboItem)
                If String.Equals(it.Text, target, StringComparison.OrdinalIgnoreCase) Then
                    cmbCombinazioni.SelectedIndex = i
                    Return
                End If
            End If
        Next

        ' fallback: prova match solo MacroCategoria
        For i As Integer = 0 To cmbCombinazioni.Items.Count - 1
            If TypeOf cmbCombinazioni.Items(i) Is FormRaffinaPattern.ComboItem Then
                Dim it = DirectCast(cmbCombinazioni.Items(i), FormRaffinaPattern.ComboItem)
                If String.Equals(it.MacroCategoria, macro, StringComparison.OrdinalIgnoreCase) Then
                    cmbCombinazioni.SelectedIndex = i
                    Return
                End If
            End If
        Next

        ' nessuna corrispondenza: lascia selezione corrente
    End Sub

    Private Async Sub BtnTrovaSimiliAI_Click(sender As Object, e As EventArgs)
        Try
            Dim parolaBase As String = txtParola.Text.Trim()
            If String.IsNullOrWhiteSpace(parolaBase) Then
                ' Se manca txtParola, prova a dedurre dalla transazione selezionata
                If dgvTransazioniNonClassificate.SelectedRows.Count > 0 Then
                    parolaBase = dgvTransazioniNonClassificate.SelectedRows(0).Cells("Descrizione").Value?.ToString()
                End If
            End If
            If String.IsNullOrWhiteSpace(parolaBase) Then
                MessageBox.Show("Inserisci una Parola oppure seleziona una transazione per proporre un termine.", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Return
            End If

            ' UI busy
            progBarAI.Visible = True
            btnAIAssistita.Enabled = False
            btnTrovaSimiliAI.Enabled = False
            btnCreaPatternAI.Enabled = False
            lblAIStatus.Text = "Ricerca pattern simili con AI..."
            lblAIStatus.ForeColor = Color.RoyalBlue

            ' Lista pattern esistenti
            Dim tutti As List(Of String) = GetTutteLeParolePattern()
            If tutti.Count = 0 Then
                progBarAI.Visible = False
                btnAIAssistita.Enabled = True
                btnTrovaSimiliAI.Enabled = True
                btnCreaPatternAI.Enabled = True
                lblAIStatus.Text = "Nessun pattern presente in archivio."
                lblAIStatus.ForeColor = Color.DarkOrange
                Return
            End If

            ' Chiamata AI
            Dim suggeriti As List(Of String) = Await gptClassificatore.TrovaPatternSimili(parolaBase, tutti)

            ' Ripristina UI
            progBarAI.Visible = False
            btnAIAssistita.Enabled = True
            btnTrovaSimiliAI.Enabled = True
            btnCreaPatternAI.Enabled = True

            If suggeriti Is Nothing OrElse suggeriti.Count = 0 Then
                lblAIStatus.Text = "Nessun pattern simile trovato dall'AI."
                lblAIStatus.ForeColor = Color.DarkOrange
                Return
            End If

            ' Mostra scelta utente
            Dim elenco As String = String.Join(vbCrLf, suggeriti.Select(Function(s, i) $"{i + 1}) {s}"))
            Dim msg As String = "Pattern simili trovati:" & vbCrLf & elenco & vbCrLf & vbCrLf & "Vuoi applicare il primo suggerimento?"
            Dim res = MessageBox.Show(msg, "Suggerimenti AI", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question)

            If res = DialogResult.Yes Then
                Dim scelto As String = suggeriti(0)
                txtParola.Text = scelto
                Dim dett = CaricaDettagliPattern(scelto)
                If Not String.IsNullOrWhiteSpace(dett.Macro) Then txtMacroCategoria.Text = dett.Macro
                If Not String.IsNullOrWhiteSpace(dett.Cat) Then txtCategoria.Text = dett.Cat
                lblAIStatus.Text = "Pattern applicato dai suggerimenti AI."
                lblAIStatus.ForeColor = Color.DarkGreen
            ElseIf res = DialogResult.No Then
                ' L'utente sceglie manualmente quale tra i suggeriti applicare
                Dim scelta = InputBox("Digita l'indice del pattern da applicare (1..N):", "Seleziona pattern", "1")
                Dim idx As Integer
                If Integer.TryParse(scelta, idx) AndAlso idx >= 1 AndAlso idx <= suggeriti.Count Then
                    Dim scelto As String = suggeriti(idx - 1)
                    txtParola.Text = scelto
                    Dim dett = CaricaDettagliPattern(scelto)
                    If Not String.IsNullOrWhiteSpace(dett.Macro) Then txtMacroCategoria.Text = dett.Macro
                    If Not String.IsNullOrWhiteSpace(dett.Cat) Then txtCategoria.Text = dett.Cat
                    lblAIStatus.Text = "Pattern applicato (scelto manualmente)."
                    lblAIStatus.ForeColor = Color.DarkGreen
                Else
                    lblAIStatus.Text = "Indice non valido o annullato."
                    lblAIStatus.ForeColor = Color.Gray
                End If
            Else
                lblAIStatus.Text = "Operazione annullata."
                lblAIStatus.ForeColor = Color.Gray
            End If

        Catch ex As Exception
            progBarAI.Visible = False
            btnAIAssistita.Enabled = True
            btnTrovaSimiliAI.Enabled = True
            btnCreaPatternAI.Enabled = True
            lblAIStatus.Text = "Errore: " & ex.Message
            lblAIStatus.ForeColor = Color.Red
        End Try
    End Sub

    Private Async Sub BtnCreaPatternAI_Click(sender As Object, e As EventArgs)
        Try
            ' Recupera descrizione/importo dalla selezione (se disponibile)
            Dim descr As String = ""
            Dim importo As Decimal = 0D
            If dgvTransazioniNonClassificate.SelectedRows.Count > 0 Then
                descr = dgvTransazioniNonClassificate.SelectedRows(0).Cells("Descrizione").Value?.ToString()
                If dgvTransazioniNonClassificate.Columns.Contains("Importo") Then
                    Dim impStr = dgvTransazioniNonClassificate.SelectedRows(0).Cells("Importo").Value?.ToString()
                    If Not String.IsNullOrWhiteSpace(impStr) Then
                        If Not Decimal.TryParse(impStr, Globalization.NumberStyles.Any, Globalization.CultureInfo.GetCultureInfo("it-IT"), importo) Then
                            Decimal.TryParse(impStr, Globalization.NumberStyles.Any, Globalization.CultureInfo.InvariantCulture, importo)
                        End If
                    End If
                End If
            End If

            If String.IsNullOrWhiteSpace(descr) Then
                ' In assenza di selezione, usa comunque txtParola per contesto minimo
                descr = txtParola.Text.Trim()
            End If
            If String.IsNullOrWhiteSpace(descr) Then
                MessageBox.Show("Seleziona una transazione o inserisci una Parola per dare contesto all'AI.", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Return
            End If

            ' UI busy
            progBarAI.Visible = True
            btnAIAssistita.Enabled = False
            btnTrovaSimiliAI.Enabled = False
            btnCreaPatternAI.Enabled = False
            lblAIStatus.Text = "Creazione pattern con AI..."
            lblAIStatus.ForeColor = Color.RoyalBlue

            Dim macroEsistenti = GetMacroCategorieEsistenti()
            Dim sugger = Await gptClassificatore.CreaPatternPersonalizzato(descr, importo, macroEsistenti)

            ' Ripristina UI
            progBarAI.Visible = False
            btnAIAssistita.Enabled = True
            btnTrovaSimiliAI.Enabled = True
            btnCreaPatternAI.Enabled = True

            If sugger Is Nothing OrElse Not sugger.IsValid Then
                lblAIStatus.Text = "Nessuna proposta AI disponibile."
                lblAIStatus.ForeColor = Color.DarkOrange
                Return
            End If

            Dim testo = "Proposta AI:" & vbCrLf &
                    $"Parola: {sugger.ParolaChiave}" & vbCrLf &
                    $"MacroCategoria: {sugger.MacroCategoria}" & vbCrLf &
                    $"Categoria: {sugger.Categoria}" & vbCrLf &
                    $"Confidenza: {sugger.Confidenza}%" & vbCrLf & vbCrLf &
                    "Applicare ai campi del pattern?"
            Dim res = MessageBox.Show(testo, "Crea pattern AI", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            If res = DialogResult.Yes Then
                txtParola.Text = sugger.ParolaChiave
                txtMacroCategoria.Text = sugger.MacroCategoria
                txtCategoria.Text = sugger.Categoria
                lblAIStatus.Text = "Pattern proposto applicato ai campi."
                lblAIStatus.ForeColor = Color.DarkGreen
            Else
                lblAIStatus.Text = "Operazione annullata dall'utente."
                lblAIStatus.ForeColor = Color.Gray
            End If

        Catch ex As Exception
            progBarAI.Visible = False
            btnAIAssistita.Enabled = True
            btnTrovaSimiliAI.Enabled = True
            btnCreaPatternAI.Enabled = True
            lblAIStatus.Text = "Errore: " & ex.Message
            lblAIStatus.ForeColor = Color.Red
        End Try
    End Sub

    Private Sub btnAggiungiPattern_Click(sender As Object, e As EventArgs) Handles btnAggiungiPattern.Click
        If transazioneSelezionataID = -1 Then
            MessageBox.Show("Seleziona una transazione dalla lista.", "Attenzione", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If

        If String.IsNullOrWhiteSpace(txtParola.Text) Then
            MessageBox.Show("Inserisci la parola del pattern.", "Attenzione", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtParola.Focus()
            Return
        End If

        ' Validazione peso
        Dim peso As Integer = 50
        If Not String.IsNullOrWhiteSpace(txtPeso.Text) Then
            If Not Integer.TryParse(txtPeso.Text, peso) OrElse peso < 0 OrElse peso > 100 Then
                MessageBox.Show("Il peso deve essere un numero intero tra 0 e 100.", "Attenzione", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                txtPeso.Focus()
                Return
            End If
        End If

        Try
            ' Salva pattern nel database
            SalvaPattern()
            CaricaCombinazioniPattern()
            AdattaLarghezzaComboCombinazioni()

            ' Scrivi log
            ScriviLogPatternManuale()

            ' Pulisci campi
            PulisciCampiPattern()

            ' Ricarica lista transazioni
            CaricaTransazioniNonClassificate()

            MessageBox.Show("Pattern aggiunto con successo!", "Successo", MessageBoxButtons.OK, MessageBoxIcon.Information)

        Catch ex As Exception
            MessageBox.Show("Errore durante il salvataggio: " & ex.Message, "Errore", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Sub SalvaPattern()
        Using conn As New SQLiteConnection(DatabaseManager.GetConnectionString())
            conn.Open()
            Dim query As String = "INSERT INTO Pattern (Parola, MacroCategoria, Categoria, Necessita, Frequenza, Stagionalita, Fonte, Peso) " &
                          "VALUES (@parola, @macroCat, @cat, @necessita, @frequenza, @stagionalita, @fonte, @peso)"
            Using cmd As New SQLiteCommand(query, conn)
                cmd.Parameters.AddWithValue("@parola", txtParola.Text.Trim())
                cmd.Parameters.AddWithValue("@macroCat", txtMacroCategoria.Text.Trim())
                cmd.Parameters.AddWithValue("@cat", txtCategoria.Text.Trim())
                cmd.Parameters.AddWithValue("@necessita", If(cmbNecessita.SelectedItem?.ToString(), ""))
                cmd.Parameters.AddWithValue("@frequenza", If(cmbFrequenza.SelectedItem?.ToString(), ""))
                cmd.Parameters.AddWithValue("@stagionalita", If(cmbStagionalita.SelectedItem?.ToString(), ""))
                cmd.Parameters.AddWithValue("@fonte", "Applicazione")
                Dim peso As Integer = 50
                Integer.TryParse(txtPeso.Text, peso)
                cmd.Parameters.AddWithValue("@peso", peso)
                cmd.ExecuteNonQuery()
            End Using
        End Using
    End Sub

    Private Sub ScriviLogPatternManuale()
        Try
            Dim logPath As String = "pattern_manuali.txt"
            Using sw As New System.IO.StreamWriter(logPath, True)
                Dim linea As String = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - ID Transazione: {transazioneSelezionataID} - Parola assegnata manualmente: {txtParola.Text.Trim()}"
                sw.WriteLine(linea)
            End Using
        Catch ex As Exception
            MessageBox.Show("Errore scrittura log: " & ex.Message)
        End Try
    End Sub

    Private Sub PulisciCampiPattern()
        txtParola.Clear()
        txtMacroCategoria.Clear()
        txtCategoria.Clear()
        ' RIMUOVI txtSottoCategoria.Clear()
        cmbNecessita.SelectedIndex = -1
        cmbFrequenza.SelectedIndex = -1
        cmbStagionalita.SelectedIndex = -1
        txtPeso.Text = "50"
        cmbCombinazioni.SelectedIndex = 0
        transazioneSelezionataID = -1
    End Sub

    Private Sub BtnChiudi_Click(sender As Object, e As EventArgs)
        Me.Close()
    End Sub

    ' Classe helper per ComboBox
    Private Class ComboItem
        Public Property Text As String
        Public Property MacroCategoria As String
        Public Property Categoria As String
        ' RIMUOVI Public Property SottoCategoria As String
        Public Property Necessita As String
        Public Property Frequenza As String
        Public Property Stagionalita As String

        Public Overrides Function ToString() As String
            Return Text
        End Function
    End Class

    ' Dichiarazione controlli
    Private WithEvents dgvTransazioniNonClassificate As DataGridView
    Private txtParola As TextBox
    Private txtMacroCategoria As TextBox
    Private txtCategoria As TextBox
    'Private txtSottoCategoria As TextBox
    Private WithEvents cmbNecessita As ComboBox
    Private WithEvents btnGestisciNecessita As Button
    Private WithEvents btnGestisciFrequenza As Button
    Private WithEvents cmbFrequenza As ComboBox
    Private WithEvents cmbStagionalita As ComboBox
    Private WithEvents btnGestisciStagionalita As Button
    Private txtPeso As TextBox
    Private WithEvents cmbCombinazioni As ComboBox
    Private WithEvents btnAggiungiPattern As Button
End Class
